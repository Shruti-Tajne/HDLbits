module top_module(
	input clk,
	input load,
	input [1:0] ena,
	input [99:0] data,
	output reg [99:0] q);
	
	// This rotator has 4 modes:
	//   load
	//   rotate left
	//   rotate right
	//   do nothing
	// I used vector part-select and concatenation to express a rotation.
	// Edge-sensitive always block: Use non-blocking assignments.
	always @(posedge clk) begin
		if (load)		// Load
			q <= data;
		else if (ena == 2'h1)	// Rotate right
			q <= {q[0], q[99:1]};
		else if (ena == 2'h2)	// Rotate left
			q <= {q[98:0], q[99]};
	end
endmodule

------------------------------------------------------------------------------------------------

module top_module(
    input clk,
    input load,
    input [1:0] ena,
    input [99:0] data,
    output reg [99:0] q); 
    
    always@(posedge clk) begin
        if (load) 
            q <= data;
        else begin
            if (ena[0]==1 && ena[1]==0) begin
                q[98:0] <= q[99:1];
                q[99] <= q[0];
            end
            else if (ena[0]==0 && ena[1]==1) begin
                q[99:1] <= q[98:0];
                q[0] <= q[99];
            end
        end
    end

endmodule